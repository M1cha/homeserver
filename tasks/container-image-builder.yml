---
- name: Create directory
  ansible.builtin.file:
    mode: '0755'
    path: /usr/local/share/container-image-builder
    state: directory

- name: Install Containerfile
  ansible.builtin.copy:
    dest: /usr/local/share/container-image-builder/Containerfile
    owner: root
    group: root
    mode: '0644'
    content: |
      FROM docker.io/golang:1.18-alpine AS golang
      RUN go install github.com/mailhog/mailhog@e6fa06877ef61ea82bbef234d94bdc75cca478d1

      FROM docker.io/alpine:latest
      RUN apk add --no-cache \
        ca-certificates \
        curl \
        fuse \
        jq \
        netcat-openbsd \
        openssh-client \
        rclone \
        restic \
        samba \
        socat \
        tzdata
      COPY --from=golang /go/bin/mailhog /usr/local/bin/

- name: Install container-image-builder
  ansible.builtin.copy:
    dest: /usr/local/bin/container-image-builder
    owner: root
    group: root
    mode: '0755'
    content: |
      #!/bin/bash

      set -euo pipefail

      tag="localhost/homeserver-universal:latest"
      containerfile="/usr/local/share/container-image-builder/Containerfile"
      export BUILDAH_LAYERS=false

      pkgs_old=$(podman run --rm "$tag" apk list --installed --quiet || true)

      podman build --pull=always --no-cache --iidfile=/tmp/iid --net=host -f "$containerfile"
      iid_new=$(cat /tmp/iid)
      pkgs_new=$(podman run --rm "$iid_new" apk list --installed --quiet)

      if [ "$pkgs_old" != "$pkgs_new" ]; then
              echo "update image"
              podman tag "$iid_new" "$tag"
      else
              echo "no update needed"
      fi

- name: Install container-image-builder.service
  ansible.builtin.copy:
    dest: /etc/systemd/system/container-image-builder.service
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=container image builder
      After=network.target

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/container-image-builder

      [Install]
      WantedBy=multi-user.target
  notify: reload_systemd

- name: Install container-image-builder.timer
  ansible.builtin.copy:
    dest: /etc/systemd/system/container-image-builder.timer
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=Nightly container image builder jobs

      [Timer]
      OnCalendar=daily
      RandomizedDelaySec=900
      Persistent=true

      [Install]
      WantedBy=timers.target
  notify: reload_systemd

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Start/Enable container-image-builder.timer
  ansible.builtin.systemd:
    name: container-image-builder.timer
    enabled: true
    state: started

