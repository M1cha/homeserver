---
# the default service flushes podmans rules on restart
- name: Replace nftables.service
  ansible.builtin.copy:
    dest: /etc/systemd/system/nftables.service
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=Netfilter Tables
      Documentation=man:nft(8)
      Wants=network-pre.target
      Before=network-pre.target

      [Service]
      Type=oneshot
      ProtectSystem=full
      ProtectHome=true
      ExecStart=/sbin/nft -f /etc/sysconfig/nftables.conf
      ExecReload=/sbin/nft -f /etc/sysconfig/nftables.conf
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  notify: reload_systemd

- name: Install nftables variables
  ansible.builtin.copy:
    dest: /etc/nftables/homeserver_vars.nft
    owner: root
    group: root
    mode: '0644'
    content: |
      {% for name, ip in container_ips %}
      define ip4_{{ name }} = {{ ip }}

      {% set ip_pub = ip | regex_replace('^10\.88\.42\.(\d+)$', '192.168.43.\\1') %}
      {% if ip_pub != ip %}
      define ip4pub_{{ name }} = {{ ip_pub }}
      {% endif %}

      {% endfor %}

      {% for name, mac in container_macs %}
      define mac_{{ name }} = {{ mac }}
      {% endfor %}
  notify: reload_nft

- name: Install main nftables config
  ansible.builtin.copy:
    dest: /etc/sysconfig/nftables.conf
    owner: root
    group: root
    mode: '0644'
    content: |
      define if_lan = "eth0"
      define if_podman = "podman*"

      include "/etc/nftables/homeserver_vars.nft"

      # reset
      table inet homeserver_filter
      table ip homeserver_nat
      table bridge homeserver_brfilter
      delete table inet homeserver_filter
      delete table ip homeserver_nat
      delete table bridge homeserver_brfilter

      table inet homeserver_filter {
        chain inbound_lan {
          tcp dport 22 accept comment "SSH"

          # for debug purposes
          icmp type echo-request limit rate 5/second accept
        }

        chain inbound_podman {
          # netavarks DNS server
          ip protocol { tcp, udp } th dport 53 accept comment "DNS"
        }

        chain input {
          type filter hook input priority 0; policy drop;

          ct state invalid drop
          ct state { established, related } accept

          # SLAAC
          icmpv6 type { nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept

          iifname lo accept
          iifname $if_lan jump inbound_lan
          iifname $if_podman jump inbound_podman

          log flags all prefix "dropped input: "
        }

        chain lan_to_podman {
          # It was an input packet but is now going to podman.
          # This means it was forwarded by netavarks rules and we want to accept it.
          meta mark & 0x2 == 0x2 accept

          # we dnat'ed this packet thus want to accept it
          meta mark & 0x1 == 0x1 accept
        }

        chain tlsproxy_to_mgmt {
          ip daddr 192.168.42.1 tcp dport 8080 accept comment "modem"
          ip daddr 192.168.42.2 tcp dport 80 accept comment "switch0"
          ip daddr 192.168.42.3 tcp dport 80 accept comment "switch1"
          ip daddr 192.168.42.4 tcp dport 80 accept comment "switch2"
        }

        chain homeassistant_to_lan {
          ip daddr 192.168.178.1 accept comment "fritzbox smart home"
          ip daddr { 192.168.178.61, 192.168.178.77 } icmp type echo-request accept comment "lxd-2 and restic-backup-2 online status"
          ip daddr 192.168.178.61 tcp dport 22 accept comment "lxd-2 rpoweroff"
        }

        chain accept_internet {
          # Source: https://phoenixnap.com/kb/public-vs-private-ip-address
          ip daddr {
            1.0.0.0-9.255.255.255,
            11.0.0.0-100.63.255.255,
            100.128.0.0-126.255.255.255,
            128.0.0.0-169.253.255.255,
            169.255.0.0-172.15.255.255,
            172.32.0.0-191.255.255.255,
            192.0.1.0/24,
            192.0.3.0-192.88.98.255,
            192.88.100.0-192.167.255.255,
            192.169.0.0-198.17.255.255,
            198.20.0.0-198.51.99.255,
            198.51.101.0-203.0.112.255,
            203.0.114.0-223.255.255.255
          } accept
        }

        chain forward {
          type filter hook forward priority 0; policy drop;

          ct state invalid drop
          ct state { established, related } accept

          iifname $if_lan oifname $if_podman jump lan_to_podman
          iifname $if_podman oifname eth0.100 ether saddr $mac_tls-proxy jump tlsproxy_to_mgmt
          iifname $if_podman oifname $if_lan ether saddr $mac_homeassistant jump homeassistant_to_lan
          iifname $if_podman ether saddr $mac_restic-autobackup ip daddr 192.168.178.77 tcp dport 8000 accept comment "restic-backup-2"
          iifname $if_podman oifname $if_lan ether saddr $mac_gitmirror jump accept_internet

          log flags all prefix "dropped forward: "
        }

        chain output {
          type filter hook output priority 0; policy accept;
        }

        chain prerouting {
          type filter hook prerouting priority -200; policy accept;

          # mark everything that is intended for one of our IPs
          iifname $if_lan fib daddr . iif type == { local, broadcast, multicast } meta mark set mark or 0x2
        }
      }

      table ip homeserver_nat {
        chain prerouting {
          type nat hook prerouting priority -100;

          iifname $if_lan ip daddr $ip4pub_grafana tcp dport 443 meta mark set mark or 0x1 dnat to $ip4_grafana:3000
          iifname $if_lan ip daddr $ip4pub_gotify tcp dport 443 meta mark set mark or 0x1 dnat to $ip4_gotify
          iifname $if_lan ip daddr $ip4pub_homeassistant tcp dport 443 meta mark set mark or 0x1 dnat to $ip4_homeassistant:8123
          iifname $if_lan ip daddr $ip4pub_mediashare-samba tcp dport {139, 445} meta mark set mark or 0x1 dnat to $ip4_mediashare-samba
          iifname $if_lan ip daddr $ip4pub_photoprism-traefik tcp dport 443 meta mark set mark or 0x1 dnat to $ip4_photoprism-traefik
          iifname $if_lan ip daddr $ip4pub_restic-backup-1 tcp dport 8000 meta mark set mark or 0x1 dnat to $ip4_restic-backup-1
          iifname $if_lan ip daddr $ip4pub_restic-backup-1 icmp type echo-request meta mark set mark or 0x1 dnat to $ip4_restic-backup-1
          iifname $if_lan fib daddr . iif type == { local, broadcast, multicast } tcp dport 8001 meta mark set mark or 0x1 dnat to $ip4_restic-powerup
          iifname $if_lan ip daddr $ip4pub_syncthing tcp dport 443 meta mark set mark or 0x1 dnat to $ip4_syncthing:8384
          iifname $if_lan ip daddr $ip4pub_syncthing tcp dport 22000 meta mark set mark or 0x1 dnat to $ip4_syncthing
          iifname $if_lan ip daddr $ip4pub_syncthing udp dport 22000 meta mark set mark or 0x1 dnat to $ip4_syncthing
          iifname $if_lan ip daddr $ip4pub_tls-proxy tcp dport 443 meta mark set mark or 0x1 dnat to $ip4_tls-proxy
        }

        chain postrouting {
          type nat hook postrouting priority 100; policy accept;

          oifname $if_lan masquerade
        }
      }

      table bridge homeserver_brfilter {
        chain forward {
          type filter hook forward priority filter; policy drop;

          ct state invalid drop
          ct state { established, related } accept

          # ARP is needed for IP discovery between containers
          ether type arp accept

          # communication rules for all containers
          ether saddr $mac_homeassistant ether daddr $mac_restic-backup-1 icmp type echo-request accept
          ether saddr $mac_homeassistant ether daddr { $mac_influxdb, $mac_gotify } accept
          ether saddr $mac_grafana ether daddr { $mac_influxdb, $mac_gotify, $mac_loki } accept
          ether saddr $mac_loki ether daddr { $mac_loki-minio } accept
          ether saddr $mac_photoprism ether daddr $mac_photoprism-mariadb accept
          ether saddr $mac_photoprism-traefik ether daddr $mac_photoprism accept
          ether saddr $mac_promtail ether daddr { $mac_loki } accept
          ether saddr $mac_restic-autobackup ether daddr { $mac_restic-powerup, $mac_restic-backup-1 } accept
          ether saddr $mac_restic-powerup ether daddr $mac_homeassistant accept

          log flags all prefix "dropped forward(bridge): "
        }
      }
  notify: reload_nft

- name: Start nftables service
  ansible.builtin.systemd:
    name: nftables.service
    enabled: true
    state: started
