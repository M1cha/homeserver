define if_lan = "eno1"
define if_lan_mgmt = "eno1.100"
define if_podman = "podman0"
define if_podman_inetonly = "podman1"
define if_libvirt = "virbr0"

include "/usr/local/share/nftables/vars.conf"

# reset
table inet homeserver_filter
table ip homeserver_nat
table bridge homeserver_brfilter
delete table inet homeserver_filter
delete table ip homeserver_nat
delete table bridge homeserver_brfilter

table inet homeserver_filter {
    chain inbound_lan {
        tcp dport 22 accept comment "SSH"

        ip6 saddr fe80::/10 udp sport 547 udp dport 546 accept comment "DHCPv6 replies"
    }

    chain inbound_podman {
        # netavarks DNS server
        ip protocol { tcp, udp } th dport 53 accept comment "DNS"
    }

    chain input {
        type filter hook input priority 0; policy drop;

        ct state invalid drop
        ct state { established, related } accept

        ip protocol icmp counter accept comment "accept all ICMP types"
        ip6 nexthdr icmpv6 counter accept comment "accept all ICMP types"

        iifname lo accept
        iifname $if_lan jump inbound_lan
        iifname $if_podman jump inbound_podman

        log flags all prefix "dropped input: "
    }

    chain tlsproxy_to_mgmt {
        ip daddr 192.168.42.1 tcp dport 8080 accept comment "modem"
        ip daddr 192.168.42.2 tcp dport 80 accept comment "switch0"
        ip daddr 192.168.42.3 tcp dport 80 accept comment "switch1"
        ip daddr 192.168.42.4 tcp dport 80 accept comment "switch2"
        ip daddr 192.168.42.5 tcp dport 80 accept comment "switch3"
    }

    chain homeassistant_to_lan {
        ip daddr 192.168.178.1 accept comment "fritzbox smart home"
        ip daddr { 192.168.178.61, 192.168.178.77 } icmp type echo-request accept comment "lxd-2 and restic-backup-2 online status"
        ip daddr 192.168.178.61 tcp dport 22 accept comment "lxd-2 rpoweroff"
        ip daddr 192.168.46.160 accept comment "samsung tv"
    }

    chain accept_internet {
        # Source: https://phoenixnap.com/kb/public-vs-private-ip-address
        ip daddr {
            1.0.0.0-9.255.255.255,
            11.0.0.0-100.63.255.255,
            100.128.0.0-126.255.255.255,
            128.0.0.0-169.253.255.255,
            169.255.0.0-172.15.255.255,
            172.32.0.0-191.255.255.255,
            192.0.1.0/24,
            192.0.3.0-192.88.98.255,
            192.88.100.0-192.167.255.255,
            192.169.0.0-198.17.255.255,
            198.20.0.0-198.51.99.255,
            198.51.101.0-203.0.112.255,
            203.0.114.0-223.255.255.255
        } accept
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        ct state invalid drop
        ct state { established, related } accept

        iifname $if_podman oifname eno1.100 ether saddr $mac_tlsproxy jump tlsproxy_to_mgmt
        iifname $if_podman oifname $if_lan ether saddr $mac_homeassistant jump homeassistant_to_lan
        iifname $if_podman ether saddr $mac_restic-autobackup ip daddr 192.168.178.77 tcp dport 8000 accept comment "restic-backup-2"
        iifname $if_podman oifname $if_lan ether saddr {
            $mac_gitmirror,
            $mac_jellyfin,
            $mac_rclone-backup,
            $mac_immich-traefik,
            $mac_jellyfin-traefik
        } jump accept_internet
        iifname $if_podman_inetonly oifname $if_lan jump accept_internet
        iifname $if_libvirt oifname $if_lan jump accept_internet
        iifname $if_lan oifname $if_libvirt ip daddr 100.64.0.0/16 accept comment "Draeger VPN"

        log flags all prefix "dropped forward: "
    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

table ip homeserver_nat {
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;

        oifname { $if_lan, $if_lan_mgmt } masquerade
    }
}

table bridge homeserver_brfilter {
    chain podman {
        # ARP is needed for IP discovery between containers
        ether type arp accept

        # communication rules for all containers
        ether saddr $mac_bitwarden ether daddr { $mac_bitwarden-db, $mac_mailhog } accept
        ether saddr $mac_homeassistant ether daddr { $mac_influxdb, $mac_gotify, $mac_mosquitto } accept
        ether saddr $mac_grafana ether daddr { $mac_influxdb, $mac_gotify } accept
        ether saddr $mac_immich-server ether daddr { $mac_immich-redis, $mac_immich-database, $mac_immich-machine-learning } accept
        ether saddr $mac_immich-traefik ether daddr $mac_immich-server accept
        ether saddr $mac_jellyfin-traefik ether daddr $mac_jellyfin accept
        ether saddr $mac_restic-autobackup ether daddr { $mac_restic-powerup, $mac_restic-backup-1 } accept
        ether saddr $mac_restic-powerup ether daddr $mac_homeassistant accept
        ether saddr $mac_smartmeter2mqtt ether daddr { $mac_mosquitto } accept
    }

    chain podman_inetonly {
        # This prevents excessive logs
        drop
    }

    chain bridge_detection {
    }

    chain forward {
        type filter hook forward priority filter; policy drop;

        ct state invalid drop
        ct state { established, related } accept

        jump bridge_detection

        log flags all prefix "dropped forward(bridge): "
    }
}
