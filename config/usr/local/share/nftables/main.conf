define if_brthread = "brthread"
define if_brvirt = "brvirt"
define if_lan = "eno1"
define if_lan_inet = "eno1.300"
define if_lan_mgmt = "eno1.100"

define if_bitwarden = "veth_bitwarden"
define if_bitwarden_db = "veth_bwdb"
define if_coredns_internal = "veth_corednsint"
define if_coredns_lan = "veth_corednslan"
define if_coredns_public = "veth_corednspub"
define if_emqx = "veth_emqx"
define if_gitmirror = "veth_gitmirror"
define if_gotify = "veth_gotify"
define if_grafana = "veth_grafana"
define if_homeassistant = "veth_hass"
define if_immich = "veth_immich"
define if_immich_db = "veth_imm_db"
define if_immich_ml = "veth_imm_ml"
define if_immich_redis = "veth_imm_red"
define if_immich_traefik = "veth_imm_prox"
define if_jellyfin = "veth_jellyfin"
define if_jellyfin_traefik = "veth_jelly_prox"
define if_jool_host = "jool"
define if_jool_ns = "veth_jool"
define if_linzenich_workload = "veth_linzen_wl"
define if_mailhog = "veth_mailhog"
define if_otbr = "veth_otbr"
define if_rclone_backup = "veth_rclone"
define if_restic_autobackup = "veth_restic_ab"
define if_restic_backup_1 = "veth_restic_b1"
define if_restic_powerup = "veth_restic_pwr"
define if_share_archive = "veth_archshare"
define if_share_media = "veth_mediashare"
define if_share_roms = "veth_romshare"
define if_syncthing = "veth_syncthing"
define if_tlsproxy = "veth_tlsproxy"
define if_unifi = "veth_unifi"
define if_vm = "vnet*"
define if_victoriametrics = "veth_vicmet"
define if_zigbee2mqtt = "veth_z2m"

define veths_with_inet = {
    $if_gitmirror,
    $if_immich_traefik,
    $if_jellyfin,
    $if_jellyfin_traefik,
    $if_linzenich_workload,
    $if_rclone_backup,
    $if_vm
}
define veths_public = {
    $if_bitwarden,
    $if_coredns_public,
    $if_emqx,
    $if_gotify,
    $if_grafana,
    $if_homeassistant,
    $if_immich_traefik,
    $if_jellyfin_traefik,
    $if_otbr,
    $if_tlsproxy,
    $if_restic_powerup,
    $if_restic_backup_1,
    $if_share_archive,
    $if_share_media,
    $if_share_roms,
    $if_syncthing,
    $if_vm,
    $if_unifi,
    $if_zigbee2mqtt
}

define addr_emqx = fd33:1491:4cfa:f000::8006
define addr_main_dns = fd33:1491:4cfa:1:b418:a5ff:fee5:966f
define addr_parents_lxd = 64:ff9b:1::c0a8:b23d
define addr_parents_router = 64:ff9b:1::c0a8:b201
define addr_restic_backup_2 = 64:ff9b:1::c0a8:b24d
define addr_router_mgmt = fd33:1491:4cfa:100::1

define mark_allow_lan = 0x1
define mark_allow_mgmt = 0x2
define mark_lan2bridge = 0x4
define mark_allow_brvirt_input = 0x8

include "/usr/local/share/nftables/variables.conf"

# reset
table inet homeserver_filter
table bridge homeserver_brfilter
delete table inet homeserver_filter
delete table bridge homeserver_brfilter

table inet homeserver_filter {
    chain inbound_lan {
        tcp dport 22 accept comment "SSH"
        ip6 saddr fe80::/10 udp sport 547 udp dport 546 accept comment "DHCPv6 replies"
        udp dport 67 drop comment "wifiap spams this for some reason"
    }

    chain inbound_brvirt {
        # netavarks DNS server
        meta l4proto { tcp, udp } th dport 53 accept comment "DNS"

        meta mark & $mark_allow_brvirt_input == $mark_allow_brvirt_input accept
    }

    chain input {
        type filter hook input priority 0; policy drop;

        ct state invalid drop
        ct state { established, related } accept

        ip protocol icmp counter accept comment "accept all ICMP types"
        ip6 nexthdr icmpv6 counter accept comment "accept all ICMP types"

        iifname lo accept
        iifname $if_lan jump inbound_lan
        iifname $if_brvirt jump inbound_brvirt

        log flags all prefix "dropped input: "
    }

    chain from_brthread {
        oifname $if_brvirt ip6 daddr $addr_emqx accept
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        ct state invalid drop
        ct state { established, related } accept

        iifname $if_lan oifname { $if_brvirt, $if_brthread } meta mark set mark | $mark_lan2bridge accept
        iifname $if_lan oifname $if_jool_host ip6 daddr fd33:1491:4cfa:f069::/64 accept comment "vpn0 access"
        iifname $if_brthread jump from_brthread
        iifname $if_brvirt oifname $if_lan_mgmt meta mark & $mark_allow_mgmt == $mark_allow_mgmt accept
        iifname $if_brvirt oifname $if_lan meta mark & $mark_allow_lan == $mark_allow_lan accept

        log flags all prefix "dropped forward: "
    }

    chain srcnat {
        type nat hook postrouting priority srcnat; policy accept;

        oifname $if_lan_mgmt meta nfproto ipv4 masquerade
    }
}

table bridge homeserver_brfilter {
    chain homeassistant_to_lan {
        ip6 daddr {
            $addr_gamingpc,
            $addr_parents_lxd,
            $addr_parents_router,
            $addr_restic_backup_2
        } meta mark set mark | $mark_allow_lan accept
    }

    chain input {
        type filter hook input priority filter; policy accept;

        iifname $if_tlsproxy meta mark set mark | $mark_allow_mgmt accept
        iifname { $if_vm, $if_coredns_internal, $if_coredns_lan } ip6 daddr $addr_main_dns meta mark set mark | $mark_allow_lan accept
        iifname $if_restic_autobackup ip6 daddr $addr_restic_backup_2 meta mark set mark | $mark_allow_lan accept
        iifname $if_homeassistant jump homeassistant_to_lan
        iifname $if_victoriametrics tcp dport 9100 meta mark set mark | $mark_allow_brvirt_input
        iifname $if_victoriametrics ip6 daddr $addr_router_mgmt tcp dport 9100 meta mark set mark | $mark_allow_mgmt
    }

    chain to_inet {
        iifname $veths_with_inet accept
        drop
    }

    chain from_inet {
        oifname $veths_with_inet accept
        drop
    }

    chain forward {
        type filter hook forward priority filter; policy drop;

        ct state { established, related } accept

        oifname $if_lan_inet jump to_inet
        iifname $if_lan_inet jump from_inet

        ip protocol icmp counter accept comment "accept all ICMP types"
        meta l4proto ipv6-icmp counter accept comment "accept all ICMP types"
        ether type arp accept

        oifname $if_bitwarden_db iifname { $if_bitwarden } accept
        oifname $if_coredns_internal iifname $veths_with_inet accept
        oifname $if_coredns_lan iifname { $if_homeassistant, $if_restic_autobackup } accept
        oifname $if_emqx iifname { $if_homeassistant, $if_linzenich_workload, $if_zigbee2mqtt } accept
        oifname $if_gotify iifname { $if_grafana, $if_homeassistant } accept
        oifname $if_homeassistant iifname { $if_restic_powerup } accept
        oifname $if_immich_db iifname { $if_immich } accept
        oifname $if_immich iifname { $if_immich_traefik } accept
        oifname $if_immich_ml iifname { $if_immich } accept
        oifname $if_immich_redis iifname { $if_immich } accept
        oifname $if_jellyfin iifname { $if_jellyfin_traefik } accept
        oifname $if_mailhog iifname { $if_bitwarden } accept
        oifname $if_restic_backup_1 iifname { $if_restic_autobackup } accept
        oifname $if_restic_powerup iifname { $if_restic_autobackup } accept
        oifname $if_victoriametrics iifname { $if_grafana, $if_homeassistant } accept
        oifname $if_vm iifname { $if_jool_ns } accept

        ip daddr 224.0.0.0/4 drop
        ip6 daddr ff00::/8 drop
        log flags all prefix "dropped forward(bridge): "
    }

    chain output {
        type filter hook output priority 0; policy drop;

        meta mark & $mark_lan2bridge != $mark_lan2bridge accept comment "allow traffic from this host"
        oifname $veths_public accept
        log flags all prefix "dropped output(bridge): "
    }
}
