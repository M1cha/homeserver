#!/usr/bin/env python3

from pathlib import Path, PurePath
import subprocess
import re
import ipaddress
import io


class Target:
    def __init__(self, user, host):
        self.user = user
        self.host = host
        self.tmpdir = PurePath("~/tmp_config")

    def rsync(self, source, target, delete=False):
        args = ["rsync"]

        if delete:
            args.append("--delete")

        args.extend(
            [
                "--compress",
                "--recursive",
                "--times",
                "--links",
                "--devices",
                "--specials",
                "--executability",
                f"{source}",
                f"{self.user}@[{self.host}]:{target}",
            ],
        )
        subprocess.run(args, check=True)

    def write_file(self, source, target):
        target = self.tmpdir / target

        subprocess.run(["ssh", f"{self.user}@{self.host}", "mkdir", "-p", target.parent], check=True)

        p = subprocess.Popen(
            ["ssh", f"{self.user}@{self.host}", f"cat > {target}"], stdin=subprocess.PIPE
        )
        p.communicate(input=source.encode())
        if p.returncode != 0:
            raise Exception("failed to write file")

    def run_script(self, file):
        with open("script.sh", "rb") as f:
            script = f.read()

        p = subprocess.run(["ssh", f"{self.user}@{self.host}", script], check=True)


def main():
    target = Target("root", "fe80::ce28:aaff:fe09:1bbd%eth0")
    source_dir = Path("./config").resolve()
    source_dir_private = Path("./config-private").resolve()

    target.rsync(f"{source_dir}/", f"{target.tmpdir}/", delete=True)
    target.rsync(f"{source_dir_private}/", f"{target.tmpdir}/")

    target.run_script("script.sh")

    print("successful")


if __name__ == "__main__":
    main()
